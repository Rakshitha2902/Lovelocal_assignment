Algorithm:

1.Initialize a variable count to 0 to keep track of the total count of digit 1.

2.Initialize a variable factor to 1. This variable represents the current place value (1s, 10s, 100s, etc.).

3.Start a loop with variable i initialized to 1.

4.Inside the loop, calculate divider as i * 10. This represents the next higher place value.

5.Update the count by adding the count of digit 1 for the current place value using the formula:
       count += (n // divider) * i + min(max(n % divider - i + 1, 0), i)
This formula accounts for the occurrences of digit 1 in the current place value.

6.Multiply i by 10 to move to the next higher place value.

7.Continue the loop until i becomes greater than n.

8.Return the final value of count.

Explanation:

The algorithm focuses on each digit place (1s, 10s, 100s, etc.) and calculates the occurrences of digit 1 at that place. It then accumulates these counts to get the total count for all digits and all places.

The factor variable represents the place value (1, 10, 100, etc.). The loop iterates through each place value, starting from the 1s place.
The formula (n // divider) * i calculates the count of digit 1 for the higher place values.
The min(max(n % divider - i + 1, 0), i) part of the formula calculates the count of digit 1 for the current place value.
The loop continues until i becomes greater than n.
In simpler terms, the algorithm breaks down the problem into counting occurrences of digit 1 at each place value and then combines these counts to get the overall total. This approach is more efficient than iterating through each number individually.





